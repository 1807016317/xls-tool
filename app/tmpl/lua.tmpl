
---@class {{ record_name }}{% for item in needColumnsData %}
---@field public {{item.column}} {%if item.type == "int" %}int{%elif item.type == "array" %}[]{% else %}string{% endif %} {{ item.desc }}
{%- endfor %}

local {{ class_name }} = {
   _data = { {% for row in rowsData %}  
    [{{loop.index}}] = { {%- for k,v in row %}{{ v }},{% endfor -%} },
            {%- endfor %}
    }
}

local __index_{{ indexOfColumns | join("_") }} = { {% for k, v in indexData %}  
    [{% if indexType == "string"  %}"{% endif %}{{ k}}{% if indexType == "string"  %}"{% endif %}] = {{v+1}},
{%- endfor %}
}

{% if indexOfColumns.length > 1 or "id" not in indexOfColumns %}
local __index_id = { {% for row in rowsData %}
    {% if row.id %} [{{ row.id }}] = {{loop.index}}, {% endif %}
    {%- endfor %}
}
{% endif %}


{{class_name}}.key_map = { {% for item in needColumnsData %}
    {{item.column}} = {{ loop.index }},
{%- endfor %}
}

local m = { 
    __index = function(t, k) 
        if k == "toObject" then
            return function()  
                local o = {}
                for key, v in pairs ({{class_name}}.key_map) do 
                    o[key] = t[v]
                end
                return o
            end 
        end
        
        assert({{class_name}}.key_map[k], "cannot find " .. k .. " in {{ record_name }}")

        return t[{{class_name}}.key_map[k]]
    end,
    __newindex = function(t, k, v)
        error("use xxx_info.set() to change value ")
    end,
}

{% if enums %}
{% for item in enums %}
{{class_name}}.{{item.name}} = {
    {%- for unit in item.lua_units %}
    {{unit}}
    {%- endfor %}
}
{% endfor %}
{% endif %}


{% if key_counts %}
{% for item in key_counts %}
{{class_name}}.{{item.name}} = {{item.value}}
{% endfor %}{% endif %}

{% if col_max_dict %}
{% for item in col_max_dict %}
{{class_name}}.{{item.name}} = {
    {%- for k,v in item.valueDict %}
    [{{k}}] = {{v}},
    {%- endfor %}
}
{% endfor %}
{% endif %}

{% if sub_classes %}
{% for subclassString, subclassArr in sub_classes %}
{{class_name}}.class_{{subclassString}} = {
    {%- for class in subclassArr %}
    [{{class.key}}] = { {{class.value}} }, 
    {%- endfor %}
}
{% endfor %}

{% for subclassString, subclassArr in sub_classes %}
{{class_name}}.{{subclassString}} = "{{subclassString}}"
{% endfor %}

function {{ class_name }}.getList(key, value)
    return {{class_name}}["class_" .. key][value] or {}
end
{% endif %}

function {{ class_name }}.getLength()
    return #{{ class_name }}._data
end

function {{ class_name }}.hasKey(k)
  if {{class_name}}.key_map[k] == nil then
    return false
  else
    return true
  end
end


--- @return {{ record_name }}
function {{ class_name }}.indexOf(index)
    if index == nil then
        return nil
    end

    local data = {{ class_name }}._data[index]
    if data and not getmetatable(data) then
        setmetatable(data, m)
    end

    return data
end

--- @return {{ record_name }}
function {{ class_name }}.getById(id, keyEnum)
    {% if indexOfColumns.length == 1 and "id" in indexOfColumns %}
    return {{ class_name }}.get({{ indexOfColumns | join(",") }}, keyEnum)
    {% else %}
    local cfg = {{ class_name }}.indexOf(__index_id[id])
    if not cfg then
        print(string.format("<color=red>%s</color>", "cannot find record in {{record_name}} with id：" .. id))
    end

    if keyEnum then
        return cfg and cfg[keyEnum]
    else
        return cfg
    end
    {% endif %}
end

--- @return {{ record_name }}
function {{ class_name }}.get({{ indexOfColumns | join(",") }}, keyEnum)
    {% if indexOfColumns.length == 1 %}
    local cfg = {{ class_name }}.indexOf(__index_{{ indexOfColumns | join("_") }}[ {{ indexOfColumns | join(",") }} ])
    {% else %}
    local k = {{ indexOfColumns | join(" .. \'_\' .. ") }}
    local cfg = {{ class_name }}.indexOf(__index_{{ indexOfColumns | join("_") }}[k])
    {% endif %}
    if not cfg then
        print(string.format("<color=red>%s</color>", "cannot find record in {{record_name}} with {{ indexOfColumns | join(", ") }}：" .. {{ indexOfColumns | join(" .. \" \" .. ") }}))
    end

    if keyEnum then
        return cfg and cfg[keyEnum]
    else
        return cfg
    end
end



function {{ class_name }}.set({{ indexOfColumns | join(",") }}, key, value)
    local record = {{ class_name }}.get({{ indexOfColumns | join(",") }})
    if record then
        local keyIndex = {{class_name}}.key_map[key]
        if keyIndex then
            record[keyIndex] = value
        end
    end
end




function {{ class_name }}.get_index_data()
    return __index_{{ indexOfColumns | join("_") }} 
end


function {{ class_name }}.find(cb)
    for i=1, {{ class_name }}.getLength(),1 do
        local rec = {{ class_name }}.indexOf(i)
        if cb(rec)==true then
            return rec
        end
    end
    return nil
end

return  {{ class_name }} 