export interface {{ record_name }} {
{%- for item in needColumnsData %}
    {{item.column}} : {%if item.type == "int" %}number{% else %} string{% endif %} ,//{{ item.desc }}
{%- endfor %}
}

{% if enumStrDict %}
export enum {{ enumStrDict.name }} {
{%- for item in enumStrDict.list %}{% if item %}
        {{item}} = {{loop.index-1}},{% endif %}
{%- endfor %}
}
{% endif %}

{% if enumNumDict %}
export enum {{ enumNumDict.name }} {
{%- for item in enumNumDict.list %}{% if item %}
        {{item}} = {{loop.index-1}},{% endif %}
{%- endfor %}
}
{% endif %}

export default class {{ class_name }}   {

    private static __data = [ {% for row in rowsData %}  
        [ {%- for v in row %}{{ v }},{% endfor -%} ],
       {%- endfor %}
    ]

    private static  __index_{{ indexOfColumns | join("_") }} = { {% for k, v in indexData %}  
        "{{ k}}" : {{v}},
    {%- endfor %}
    }

    private static __key_map = { {% for item in needColumnsData %}
        "{{item.column}}" : {{ loop.index-1 }},
    {%- endfor %}
    }

    {% if enums %}
    {% for item in enums %}
    public static {{item.name}} = {
        {%- for unit in item.units %}
        {{unit}}
        {%- endfor %}
    }
    {% endfor %}
    {% endif %}

    {% if key_counts %}
    {% for item in key_counts %}
    public static {{item.name}} = {{item.value}}
    {% endfor %}
    {% endif %}

    {% if sub_classes %}
    {% for subclassString, subclassArr in sub_classes %}
    private static class_{{subclassString}} = {
        {%- for class in subclassArr %}
        "{{class.key}}": [{{class.value}}], 
        {%- endfor %}
    }
    {% endfor %}

    {% for subclassString, subclassArr in sub_classes %}
    public static {{subclassString}}: string = "{{subclassString}}"
    {% endfor %}

    {% if extraDictName %}
    public static {{extraDictName}} = {{extraDict}}
    {% endif %}
    
    {% if keyTypeList.length > 1 %}
    public static getList(key: string, value: number | string): [{{ keyTypeList | join(", ") }}][] {
        return {{class_name}}["class_" + key][value] || []
    }
    {% endif %}
    {% if keyTypeList.length === 1 %}
    public static getList(key: string, value: number | string): {{keyTypeList}}[] {
        return {{class_name}}["class_" + key][value] || []
    }
    {% endif %}

    public static getListLen(key: string): number {
        let dict = {{class_name}}["class_" + key]
        return Object.keys(dict).length || 0
    }
    {% endif %}

    public static getLength():number {
        return {{ class_name }}.__data.length;
    }

    public static hasKey(k: string) :boolean{
        if ({{ class_name }}.__key_map[k] != null) {
            return true;
        }
        return false;
    }


    public static indexOf(index: number) : Readonly<{{ record_name }}>  {
        if (index == null) {
            return null
        }
        let raw = {{ class_name }}.__data[index]
        if (raw == null) {
            return null
        }
        let record = {} as {{ record_name }}
        for (let key in {{ class_name }}.__key_map) {
            record[key] = raw[{{ class_name }}.__key_map[key] ]
        }
        return record
    }

    public static getSafe({{ typeAndIndex | join(", ") }}): Readonly<{{ record_name }}> {
        {% if indexOfColumns.length == 1 %}
        let ret = {{ class_name }}.indexOf({{ class_name }}.__index_{{ indexOfColumns | join("_") }}[ {{ indexOfColumns | join(",") }} ])
        if (!ret) {
            throw new Error(`{{ class_name }} {{ indexOfColumns | join("_") }} ${ {{ indexOfColumns | join(",") }} } value is null`)
        }
        {% else %}
        let k = {{ indexOfColumns | join(" + \'_\' + ") }}
        let ret =  {{ class_name }}.indexOf({{ class_name }}.__index_{{ indexOfColumns | join("_") }}[k])
        if (!ret) {
            throw new Error(`{{ class_name }} {{ indexOfColumns | join("_") }} ${k} value is null`)
        }
        {% endif %} 
        return ret
    }

    public static get({{ typeAndIndex | join(", ") }}): Readonly<{{ record_name }}> {
        {% if indexOfColumns.length == 1 %}
        return {{ class_name }}.indexOf({{ class_name }}.__index_{{ indexOfColumns | join("_") }}[ {{ indexOfColumns | join(",") }} ])
        {% else %}
        let k = {{ indexOfColumns | join(" + \'_\' + ") }}
        return {{ class_name }}.indexOf({{ class_name }}.__index_{{ indexOfColumns | join("_") }}[k])
        {% endif %} 
    }

    private static _getRowCfgByKey(key: string | number): (string | number)[] {
        let index = {{ class_name }}.__index_{{ indexOfColumns | join("_") }}[key]
        let rowCfg = {{ class_name }}.__data[index]
        if(!rowCfg) {
            return null
        }
        return rowCfg
    }

    private static _getRowCfgByIdx(index: number): (string | number)[] {
        let rowCfg = {{ class_name }}.__data[index]
        if (!rowCfg) {
            return null
        }
        return rowCfg
    }

    {% if enumStrDict %}
    public static getStringByKey({{ typeAndIndex | join(", ") }}, valueIdx: {{enumStrDict.name}}, showError: boolean = false): string {
        {% if indexOfColumns.length == 1 %}
        let k = {{ indexOfColumns | join(",") }}
        {% else %}
        let k = {{ indexOfColumns | join(" + \'_\' + ") }}
        {% endif %} 
        let rowCfg = {{ class_name }}._getRowCfgByKey(k)
        if(!rowCfg) {
            if(showError) {
                throw new Error(`{{ class_name }} ${k} rowCfg is null`)
            }
            return null
        }
        return rowCfg[valueIdx] as string
    }

    public static getStringByIdx(index: number, valueIdx: {{enumStrDict.name}}): string {
        let rowCfg = {{ class_name }}._getRowCfgByIdx(index)
        return rowCfg[valueIdx] as string
    }
    {% endif %}

    {% if enumNumDict %}
    public static getNumberByKey({{ typeAndIndex | join(", ") }}, valueIdx: {{enumNumDict.name}}, showError: boolean = false): number {
        {% if indexOfColumns.length == 1 %}
        let k = {{ indexOfColumns | join(",") }}
        {% else %}
        let k = {{ indexOfColumns | join(" + \'_\' + ") }}
        {% endif %} 
        let rowCfg = {{ class_name }}._getRowCfgByKey(k)
        if(!rowCfg) {
            if(showError) {
                throw new Error(`{{ class_name }} ${k} rowCfg is null`)
            } 
            return null
        }
        return rowCfg[valueIdx] as number
    }

    public static getNumberByIdx(index: number, valueIdx: {{enumNumDict.name}}): number {
        let rowCfg = {{ class_name }}._getRowCfgByIdx(index)
        return rowCfg[valueIdx] as number
    }
    {% endif %}
}
